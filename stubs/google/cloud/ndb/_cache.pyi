from UserDict import UserDict
from google.cloud.ndb import tasklets as tasklets
from typing import Any, Optional

class ContextCache(UserDict):
    def get_and_validate(self, key: Any): ...

class _GlobalCacheBatch:
    def full(self): ...
    def idle_callback(self) -> None: ...
    def done_callback(self, cache_call: Any) -> None: ...
    def make_call(self) -> None: ...
    def future_info(self, key: Any) -> None: ...

def global_get(key: Any): ...

class _GlobalCacheGetBatch(_GlobalCacheBatch):
    todo: Any = ...
    keys: Any = ...
    def __init__(self, ignore_options: Any) -> None: ...
    def add(self, key: Any): ...
    def done_callback(self, cache_call: Any) -> None: ...
    def make_call(self): ...
    def future_info(self, key: Any): ...

def global_set(key: Any, value: Any, expires: Optional[Any] = ...): ...

class _GlobalCacheSetBatch(_GlobalCacheBatch):
    expires: Any = ...
    todo: Any = ...
    futures: Any = ...
    def __init__(self, options: Any) -> None: ...
    def add(self, key: Any, value: Any): ...
    def make_call(self): ...
    def future_info(self, key: Any, value: Any): ...

def global_delete(key: Any): ...

class _GlobalCacheDeleteBatch(_GlobalCacheBatch):
    keys: Any = ...
    futures: Any = ...
    def __init__(self, ignore_options: Any) -> None: ...
    def add(self, key: Any): ...
    def make_call(self): ...
    def future_info(self, key: Any): ...

def global_watch(key: Any): ...

class _GlobalCacheWatchBatch(_GlobalCacheDeleteBatch):
    keys: Any = ...
    futures: Any = ...
    def __init__(self, ignore_options: Any) -> None: ...
    def make_call(self): ...
    def future_info(self, key: Any): ...

def global_compare_and_swap(key: Any, value: Any, expires: Optional[Any] = ...): ...

class _GlobalCacheCompareAndSwapBatch(_GlobalCacheSetBatch):
    def make_call(self): ...
    def future_info(self, key: Any, value: Any): ...

def global_lock(key: Any): ...
def is_locked_value(value: Any): ...
def global_cache_key(key: Any): ...
