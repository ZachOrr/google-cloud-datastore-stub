from google.cloud._helpers import (
    _datetime_to_pb_timestamp as _datetime_to_pb_timestamp,
    _pb_timestamp_to_datetime as _pb_timestamp_to_datetime,
)
from google.cloud.datastore.entity import Entity as Entity
from google.cloud.datastore.key import Key as Key
from google.cloud.datastore_v1.proto import (
    datastore_pb2 as datastore_pb2,
    entity_pb2 as entity_pb2,
)
from google.protobuf import struct_pb2 as struct_pb2
from google.type import latlng_pb2 as latlng_pb2
from typing import Any

def _get_meaning(value_pb: Any, is_list: bool = ...): ...
def _new_value_pb(entity_pb: Any, name: Any): ...
def _property_tuples(entity_pb: Any): ...
def entity_from_protobuf(pb: Any): ...
def _set_pb_meaning_from_entity(
    entity: Any, name: Any, value: Any, value_pb: Any, is_list: bool = ...
) -> None: ...
def entity_to_protobuf(entity: Any): ...
def get_read_options(eventual: Any, transaction_id: Any): ...
def key_from_protobuf(pb: Any): ...
def _pb_attr_value(val: Any): ...
def _get_value_from_value_pb(value_pb: Any): ...
def _set_protobuf_value(value_pb: Any, val: Any) -> None: ...

class GeoPoint:
    latitude: Any = ...
    longitude: Any = ...
    def __init__(self, latitude: Any, longitude: Any) -> None: ...
    def to_protobuf(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
