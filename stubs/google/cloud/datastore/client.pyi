from google.api_core.gapic_v1 import client_info as client_info
from google.cloud._helpers import _LocalStack as _LocalStack
from google.cloud.client import ClientWithProject as ClientWithProject
from google.cloud.datastore import __version__ as __version__, helpers as helpers
from google.cloud.datastore._gapic import make_datastore_api as make_datastore_api
from google.cloud.datastore._http import HTTPDatastoreAPI as HTTPDatastoreAPI
from google.cloud.datastore.batch import Batch as Batch
from google.cloud.datastore.entity import Entity as Entity
from google.cloud.datastore.key import Key as Key
from google.cloud.datastore.query import Query as Query
from google.cloud.datastore.transaction import Transaction as Transaction
from google.cloud.environment_vars import (
    DISABLE_GRPC as DISABLE_GRPC,
    GCD_DATASET as GCD_DATASET,
    GCD_HOST as GCD_HOST,
)
from typing import Any, Optional

_HAVE_GRPC: bool
_CLIENT_INFO: Any
_MAX_LOOPS: int
_DATASTORE_BASE_URL: str
_USE_GRPC: Any

def _get_gcd_project(): ...
def _determine_default_project(project: Optional[Any] = ...): ...
def _extended_lookup(
    datastore_api: Any,
    project: Any,
    key_pbs: Any,
    missing: Optional[Any] = ...,
    deferred: Optional[Any] = ...,
    eventual: bool = ...,
    transaction_id: Optional[Any] = ...,
): ...

class Client(ClientWithProject):
    SCOPE: Any = ...
    namespace: Any = ...
    _client_info: Any = ...
    _client_options: Any = ...
    _batch_stack: Any = ...
    _datastore_api_internal: Any = ...
    _use_grpc: Any = ...
    _base_url: Any = ...
    def __init__(
        self,
        project: Optional[Any] = ...,
        namespace: Optional[Any] = ...,
        credentials: Optional[Any] = ...,
        client_info: Any = ...,
        client_options: Optional[Any] = ...,
        _http: Optional[Any] = ...,
        _use_grpc: Optional[Any] = ...,
    ) -> None: ...
    @staticmethod
    def _determine_default(project: Any): ...
    @property
    def base_url(self): ...
    @base_url.setter
    def base_url(self, value: Any) -> None: ...
    @property
    def _datastore_api(self): ...
    def _push_batch(self, batch: Any) -> None: ...
    def _pop_batch(self): ...
    @property
    def current_batch(self): ...
    @property
    def current_transaction(self): ...
    def get(
        self,
        key: Any,
        missing: Optional[Any] = ...,
        deferred: Optional[Any] = ...,
        transaction: Optional[Any] = ...,
        eventual: bool = ...,
    ): ...
    def get_multi(
        self,
        keys: Any,
        missing: Optional[Any] = ...,
        deferred: Optional[Any] = ...,
        transaction: Optional[Any] = ...,
        eventual: bool = ...,
    ): ...
    def put(self, entity: Any) -> None: ...
    def put_multi(self, entities: Any) -> None: ...
    def delete(self, key: Any) -> None: ...
    def delete_multi(self, keys: Any) -> None: ...
    def allocate_ids(self, incomplete_key: Any, num_ids: Any): ...
    def key(self, *path_args: Any, **kwargs: Any): ...
    def batch(self): ...
    def transaction(self, **kwargs: Any): ...
    def query(self, **kwargs: Any): ...
    def reserve_ids(self, complete_key: Any, num_ids: Any) -> None: ...
