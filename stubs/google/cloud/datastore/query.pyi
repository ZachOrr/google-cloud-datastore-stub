from google.api_core import page_iterator as page_iterator
from google.cloud._helpers import _ensure_tuple_or_list as _ensure_tuple_or_list
from google.cloud.datastore import helpers as helpers
from google.cloud.datastore.key import Key as Key
from google.cloud.datastore_v1.proto import (
    entity_pb2 as entity_pb2,
    query_pb2 as query_pb2,
)
from typing import Any, Optional

_NOT_FINISHED: Any
_NO_MORE_RESULTS: Any
_FINISHED: Any

class Query:
    OPERATORS: Any = ...
    _client: Any = ...
    _kind: Any = ...
    _project: Any = ...
    _namespace: Any = ...
    _ancestor: Any = ...
    _filters: Any = ...
    _projection: Any = ...
    _order: Any = ...
    _distinct_on: Any = ...
    def __init__(
        self,
        client: Any,
        kind: Optional[Any] = ...,
        project: Optional[Any] = ...,
        namespace: Optional[Any] = ...,
        ancestor: Optional[Any] = ...,
        filters: Any = ...,
        projection: Any = ...,
        order: Any = ...,
        distinct_on: Any = ...,
    ) -> None: ...
    @property
    def project(self): ...
    @property
    def namespace(self): ...
    @namespace.setter
    def namespace(self, value: Any) -> None: ...
    @property
    def kind(self): ...
    @kind.setter
    def kind(self, value: Any) -> None: ...
    @property
    def ancestor(self): ...
    @ancestor.setter
    def ancestor(self, value: Any) -> None: ...
    def ancestor(self) -> None: ...
    @property
    def filters(self): ...
    def add_filter(self, property_name: Any, operator: Any, value: Any): ...
    @property
    def projection(self): ...
    @projection.setter
    def projection(self, projection: Any) -> None: ...
    def keys_only(self) -> None: ...
    def key_filter(self, key: Any, operator: str = ...) -> None: ...
    @property
    def order(self): ...
    @order.setter
    def order(self, value: Any) -> None: ...
    @property
    def distinct_on(self): ...
    @distinct_on.setter
    def distinct_on(self, value: Any) -> None: ...
    def fetch(
        self,
        limit: Optional[Any] = ...,
        offset: int = ...,
        start_cursor: Optional[Any] = ...,
        end_cursor: Optional[Any] = ...,
        client: Optional[Any] = ...,
        eventual: bool = ...,
    ): ...

class Iterator(page_iterator.Iterator):
    next_page_token: Any = ...
    _query: Any = ...
    _offset: Any = ...
    _end_cursor: Any = ...
    _eventual: Any = ...
    _more_results: bool = ...
    _skipped_results: int = ...
    def __init__(
        self,
        query: Any,
        client: Any,
        limit: Optional[Any] = ...,
        offset: Optional[Any] = ...,
        start_cursor: Optional[Any] = ...,
        end_cursor: Optional[Any] = ...,
        eventual: bool = ...,
    ) -> None: ...
    def _build_protobuf(self): ...
    def _process_query_results(self, response_pb: Any): ...
    def _next_page(self): ...

def _pb_from_query(query: Any): ...
def _item_to_entity(iterator: Any, entity_pb: Any): ...
