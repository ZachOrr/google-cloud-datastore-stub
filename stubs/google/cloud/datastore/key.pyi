from google.cloud._helpers import _to_bytes as _to_bytes
from google.cloud.datastore import _app_engine_key_pb2 as _app_engine_key_pb2
from typing import Any, Optional

_DATABASE_ID_TEMPLATE: str
_BAD_ELEMENT_TEMPLATE: str
_EMPTY_ELEMENT: str

class Key:
    _flat_path: Any = ...
    _namespace: Any = ...
    _project: Any = ...
    _path: Any = ...
    def __init__(self, *path_args: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    @staticmethod
    def _parse_path(path_args: Any): ...
    def _combine_args(self): ...
    def _clone(self): ...
    def completed_key(self, id_or_name: Any): ...
    def to_protobuf(self): ...
    def to_legacy_urlsafe(self, location_prefix: Optional[Any] = ...): ...
    @classmethod
    def from_legacy_urlsafe(cls, urlsafe: Any): ...
    @property
    def is_partial(self): ...
    @property
    def namespace(self): ...
    @property
    def path(self): ...
    @property
    def flat_path(self): ...
    @property
    def kind(self): ...
    @property
    def id(self): ...
    @property
    def name(self): ...
    @property
    def id_or_name(self): ...
    @property
    def project(self): ...
    def _make_parent(self): ...
    _parent: Any = ...
    @property
    def parent(self): ...
    def __repr__(self): ...

def _validate_project(project: Any, parent: Any): ...
def _clean_app(app_str: Any): ...
def _get_empty(value: Any, empty_value: Any): ...
def _check_database_id(database_id: Any) -> None: ...
def _add_id_or_name(flat_path: Any, element_pb: Any, empty_allowed: Any) -> None: ...
def _get_flat_path(path_pb: Any): ...
def _to_legacy_path(dict_path: Any): ...
